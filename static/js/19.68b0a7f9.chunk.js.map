{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/types.ts","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBnbAddress","tokens","wbnb","address","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","lpLabel","totalValueFormatted","addLiquidityUrl","href","symbol","Flex","CardHeading","Tag","token","multiplier","isCommunityFarm","quoteToken","justifyContent","alignItems","mb","variant","primaryToken","secondaryToken","width","height","flexDirection","split","AnnualRoiContainer","AnnualRoiDisplay","Text","DepositModal","max","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","decimals","isTokenOnly","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","BigNumber","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","gt","handleChange","useCallback","e","currentTarget","validity","valid","value","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","Modal","onSelectMax","onChange","inputTitle","mt","mr","scale","disabled","isFinite","eq","a","console","error","style","alignSelf","WithdrawModal","valNumber","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","displayBalance","stakedBalanceBigNumber","getBalanceAmount","lt","toFixed","ROUND_DOWN","useModal","onPresentDeposit","onPresentWithdraw","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","Balance","fontSize","unit","prefix","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","StyledFlex","text","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","textSubtle","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","StyledValue","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","toLocaleString","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","getBscScanLink","CardActionsContainer","Container","AprWrapper","Apr","originalValue","hideButton","mediaQueries","sm","TokenWrapper","Farm","label","getBalanceNumber","Amount","span","earned","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","input","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","ml","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","Layout","CellLayout","children","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","props","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","ViewMode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","getDisplayApr","Image","cakeRewardsApr","lpRewardsApr","Farms","farmsProps","path","useFarms","farmsLP","userDataLoaded","hamsterPrice","usePriceHamsterBusd","query","setQuery","useUserFarmsViewMode","setViewMode","sortOption","setSortOption","useIntersectionObserver","observerRef","isIntersecting","chosenFarmsLength","tokenMode","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","price","BIG_TEN","pow","lowercaseQuery","latinise","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","length","farmsCurrentlyVisible","rowData","Page","PageHeader","checked","options","onOptionChange","option","marginLeft","SearchInput","target","placeholder","sort","b","exact","renderContent","Loading"],"mappings":"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","file":"static/js/19.68b0a7f9.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport tokens from 'config/constants/tokens'\n\nconst getLiquidityUrlPathParts = ({\n  quoteTokenAddress,\n  tokenAddress,\n}: {\n  quoteTokenAddress: string\n  tokenAddress: string\n}): string => {\n  const wBnbAddress = tokens.wbnb.address\n  const firstPart = !quoteTokenAddress || quoteTokenAddress === wBnbAddress ? 'BNB' : quoteTokenAddress\n  const secondPart = !tokenAddress || tokenAddress === wBnbAddress ? 'BNB' : tokenAddress\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl} color=\"text\">{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress} color=\"text\">{t('View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress} color=\"text\">{t('See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  token: Token\n  quoteToken: Token\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\ninterface DepositModalProps {\n  max: BigNumber\n  stakedBalance: BigNumber\n  multiplier?: string\n  lpPrice: BigNumber\n  lpLabel?: string\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  decimals?: number\n  isTokenOnly?: boolean\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n  decimals,\n  isTokenOnly,\n}) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    if (isTokenOnly) {\n      return getFullDisplayBalance(max, decimals)\n    }\n    return getFullDisplayBalance(max)\n  }, [max, decimals, isTokenOnly])\n\n  const lpTokensToStake = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const usdToStake = lpTokensToStake.times(lpPrice)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber(),\n  })\n\n  const annualRoi = cakePrice.times(interestBreakdown[3])\n  const formattedAnnualRoi = formatNumber(\n    annualRoi.toNumber(),\n    annualRoi.gt(10000) ? 0 : 2,\n    annualRoi.gt(10000) ? 0 : 2,\n  )\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n        stakingTokenBalance={stakedBalance.plus(max)}\n        stakingTokenSymbol={tokenName}\n        stakingTokenPrice={lpPrice.toNumber()}\n        earningTokenPrice={cakePrice.toNumber()}\n        apr={apr}\n        multiplier={multiplier}\n        displayApr={displayApr}\n        linkHref={addLiquidityUrl}\n        isFarm\n        initialValue={val}\n        onBack={() => setShowRoiCalculator(false)}\n      />\n    )\n  }\n\n  return (\n    <Modal title={!isTokenOnly ? t('Stake LP tokens') : t(`Stake ${tokenName} tokens`)} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        <Text mr=\"8px\" color=\"textSubtle\">\n          {t('Annual ROI at current rates')}:\n        </Text>\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </AnnualRoiContainer>\n      </Flex>\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { ModalActions, ModalInput } from 'components/Modal'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  decimals?: number\n  isTokenOnly?: boolean\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '', decimals, isTokenOnly }) => {\n  const [val, setVal] = useState('')\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    if (isTokenOnly) {\n      return getFullDisplayBalance(max, decimals)\n    }\n    return getFullDisplayBalance(max)\n  }, [max, decimals, isTokenOnly])\n\n  const valNumber = new BigNumber(val)\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={!isTokenOnly ? t('Unstake LP tokens') : t(`Unstake ${tokenName} tokens`)} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onConfirm(val)\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\n              onDismiss()\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Confirming') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import { useCallback } from 'react'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useUnstakeFarms = (pid: number, decimals: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      await unstakeFarm(masterChefContract, pid, amount, decimals)\n    },\n    [masterChefContract, pid, decimals],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakeFarms\n","import { useCallback } from 'react'\nimport { stakeFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useStakeFarms = (pid: number, decimals: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stakeFarm(masterChefContract, pid, amount, decimals)\n      console.info(txHash)\n    },\n    [masterChefContract, pid, decimals],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakeFarms\n","import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n  decimals?: number\n  isTokenOnly?: boolean\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n  decimals = 18,\n  isTokenOnly,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid, decimals)\n  const { onUnstake } = useUnstakeFarms(pid, decimals)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = !isTokenOnly ? getBalanceAmount(stakedBalance) : getBalanceAmount(stakedBalance, decimals)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance, decimals, isTokenOnly])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n      decimals={decimals}\n      isTokenOnly={isTokenOnly}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} decimals={decimals} isTokenOnly={isTokenOnly} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        variant=\"secondary\"\n        width=\"110px\"\n      >\n        { isTokenOnly ? t('Stake') : t('Stake LP') }\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\" mt=\"10px\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { harvestFarm } from 'utils/calls'\nimport { useMasterchef } from 'hooks/useContract'\n\nconst useHarvestFarm = (farmPid: number) => {\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    await harvestFarm(masterChefContract, farmPid)\n  }, [farmPid, masterChefContract])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestFarm\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport useToast from 'hooks/useToast'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useWeb3React } from '@web3-react/core'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport Balance from 'components/Balance'\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const cakePrice = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n        {earningsBusd > 0 && (\n          <Balance fontSize=\"14px\" color=\"primary\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n        )}\n      </Flex>\n      <Button\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          try {\n            await onReward()\n            toastSuccess(\n              `${t('Harvested')}!`,\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CHEESE' }),\n            )\n          } catch (e) {\n            toastError(\n              t('Error'),\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n            )\n            console.error(e)\n          } finally {\n            setPendingTx(false)\n          }\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n        }}\n        variant=\"secondary\"\n      >\n        {pendingTx ? t('Harvesting') : t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import { useCallback } from 'react'\nimport { ethers, Contract } from 'ethers'\nimport { useMasterchef } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\n\nconst useApproveFarm = (lpContract: Contract) => {\n  const masterChefContract = useMasterchef()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const handleApprove = useCallback(async () => {\n    const tx = await callWithGasPrice(lpContract, 'approve', [masterChefContract.address, ethers.constants.MaxUint256])\n    const receipt = await tx.wait()\n    return receipt.status\n  }, [lpContract, masterChefContract, callWithGasPrice])\n\n  return { onApprove: handleApprove }\n}\n\nexport default useApproveFarm\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\nimport useApproveFarm from '../../hooks/useApproveFarm'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\n\nconst StyledFlex = styled(Flex)`\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  border-radius: 10px;\n  border: 1px solid ${({ theme }) => theme.colors.text};\n  padding: 15px;\n`\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  account?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = farm\n  const { allowance, tokenBalance, stakedBalance, earnings } = farm.userData || {}\n  const lpAddress = getAddress(lpAddresses)\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const dispatch = useAppDispatch()\n\n  const lpContract = useERC20(lpAddress)\n\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={farm.lpSymbol}\n        decimals={farm.token.decimals}\n        pid={pid}\n        apr={farm.apr}\n        lpLabel={lpLabel}\n        cakePrice={cakePrice}\n        addLiquidityUrl={addLiquidityUrl}\n        isTokenOnly={farm.isTokenOnly}\n      />\n    ) : (\n      <Button mt=\"10px\" width=\"200px\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n        {t('Enable Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <StyledFlex mb=\"15px\">\n        <Flex mb=\"10px\">\n          <Text bold textTransform=\"uppercase\" color=\"text\" fontSize=\"14px\" pr=\"4px\">\n            CHEESE\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"text\" fontSize=\"14px\">\n            {t('Earned')}\n          </Text>\n        </Flex>\n        <HarvestAction earnings={earnings} pid={pid} />\n      </StyledFlex>\n      <StyledFlex>\n        <Flex>\n          <Text bold textTransform=\"uppercase\" color=\"text\" fontSize=\"14px\" pr=\"4px\">\n            {farm.lpSymbol}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"text\" fontSize=\"14px\">\n            {t('Staked')}\n          </Text>\n        </Flex>\n        {!account ? <ConnectWalletButton mt=\"10px\" width=\"200px\" variant=\"secondary\" /> : renderApprovalOrStakeButton()}\n      </StyledFlex>\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n  height: 16px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport interface ApyButtonProps {\n  variant: 'text' | 'text-and-button'\n  pid: number\n  lpSymbol: string\n  lpLabel?: string\n  multiplier: string\n  cakePrice?: BigNumber\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\n      stakingTokenSymbol={lpSymbol}\n      stakingTokenPrice={lpPrice.toNumber()}\n      earningTokenPrice={cakePrice.toNumber()}\n      apr={apr}\n      multiplier={multiplier}\n      displayApr={displayApr}\n      linkHref={addLiquidityUrl}\n      isFarm\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\n      {displayApr}%\n      {variant === 'text-and-button' && (\n        <IconButton variant=\"text\" scale=\"sm\">\n          <CalculateIcon width=\"18px\" />\n        </IconButton>\n      )}\n    </ApyLabelContainer>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\nimport { DeserializedFarm } from 'state/types'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends DeserializedFarm {\n  apr?: number\n  lpRewardsApr?: number\n  liquidity?: BigNumber\n}\n\nconst StyledCard = styled(Card)`\n  align-self: baseline;\n`\n\nconst FarmCardInnerContainer = styled(Flex)`\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n`\n\nconst ExpandingWrapper = styled.div`\n  padding: 24px;\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  overflow: hidden;\n`\n\nconst StyledValue = styled(Flex)`\n  background:  ${({ theme }) => theme.colors.primary};\n  border-radius: 10px;\n  padding: 6px 10px;\n  width: 90%;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  displayApr: string\n  removed: boolean\n  cakePrice?: BigNumber\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted =\n    farm.liquidity\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n      : ''\n\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CHEESE')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = getAddress(farm.lpAddresses)\n  const isPromotedFarm = farm.token.symbol === 'CHEESE'\n\n  return (\n    <StyledCard isActive={isPromotedFarm}>\n      <FarmCardInnerContainer>\n        <CardHeading\n          lpLabel={lpLabel}\n          multiplier={farm.multiplier}\n          isCommunityFarm={farm.isCommunity}\n          token={farm.token}\n          quoteToken={farm.quoteToken}\n        />\n        <Flex mb=\"10px\">\n          {!removed && (\n            <Flex justifyContent=\"space-between\" width=\"50%\" flexDirection=\"column\">\n              <Text>{t('APR')}</Text>\n              <Text style={{ display: 'flex', alignItems: 'center' }}>\n                {farm.apr ? (\n                  <StyledValue>\n                    <ApyButton\n                      variant=\"text-and-button\"\n                      pid={farm.pid}\n                      lpSymbol={farm.lpSymbol}\n                      multiplier={farm.multiplier}\n                      lpLabel={lpLabel}\n                      addLiquidityUrl={addLiquidityUrl}\n                      cakePrice={cakePrice}\n                      apr={farm.apr}\n                      displayApr={displayApr}\n                    />\n                  </StyledValue>\n                ) : (\n                  <Skeleton height={24} width={80} />\n                )}\n              </Text>\n            </Flex>\n          )}\n          <Flex justifyContent=\"space-between\" width=\"50%\" flexDirection=\"column\">\n            <Text>{t('Earn')}</Text>\n            <StyledValue>{earnLabel}</StyledValue>\n          </Flex>\n        </Flex>\n        <Flex>\n          <Flex justifyContent=\"space-between\" width=\"50%\" flexDirection=\"column\">\n            <Text>{t('Total Liquidity')}</Text>\n            {totalValueFormatted ? <StyledValue>{totalValueFormatted}</StyledValue> : <Skeleton width={75} height={25} />}\n          </Flex>\n          <Flex justifyContent=\"space-between\" width=\"50%\" flexDirection=\"column\">\n            <Text>{t('Multiplier')}</Text>\n            {farm.multiplier ? <StyledValue>{farm.multiplier}</StyledValue> : <Skeleton width={75} height={25} />}\n          </Flex>\n        </Flex>\n        {showExpandableSection && (\n          <DetailsSection\n            removed={removed}\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\n            infoAddress={`/info/pool/${lpAddress}`}\n            totalValueFormatted={totalValueFormatted}\n            lpLabel={lpLabel}\n            addLiquidityUrl={addLiquidityUrl}\n          />\n        )}\n        <CardActionsContainer\n          farm={farm}\n          lpLabel={lpLabel}\n          account={account}\n          cakePrice={cakePrice}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </FarmCardInnerContainer>\n      <ExpandingWrapper>\n        <ExpandableSectionButton\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\n          expanded={showExpandableSection}\n        />\n      </ExpandingWrapper>\n    </StyledCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  pid: number\n  lpLabel: string\n  lpSymbol: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n  margin: auto;\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  pid,\n  lpLabel,\n  lpSymbol,\n  multiplier,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <ApyButton\n          variant={hideButton ? 'text' : 'text-and-button'}\n          pid={pid}\n          lpSymbol={lpSymbol}\n          lpLabel={lpLabel}\n          multiplier={multiplier}\n          cakePrice={cakePrice}\n          apr={originalValue}\n          displayApr={value}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/farms/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { TokenPairImage } from 'components/TokenImage'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  token: Token\n  quoteToken: Token\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst TokenWrapper = styled.div`\n  padding-right: 8px;\n  width: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <TokenWrapper>\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\n      </TokenWrapper>\n      <div>\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from '@pancakeswap/uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => theme.colors.textSubtle};\n  display: flex;\n  align-items: center;\n  margin: auto;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n  margin: auto;\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isDesktop } = useMatchBreakpoints()\n\n  return (\n    <Container>\n      {!isDesktop && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  width: 36px;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: auto;\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\n  const { t } = useTranslation()\n  const tooltipContent = (\n    <>\n      <Text>\n        {t(\n          'The Multiplier represents the proportion of CHEESE rewards each farm receives, as a proportion of the CHEESE produced each block.',\n        )}\n      </Text>\n      <Text my=\"24px\">\n        {t('For example, if a 1x farm received 1 CHEESE per block, a 40x farm would receive 250 CHEESE per block.')}\n      </Text>\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\n    placement: 'top-end',\n    tooltipOffset: [20, 10],\n  })\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\n\nexport interface LiquidityProps {\n  liquidity: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  margin: auto;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity =\n    liquidity && liquidity.gt(0) ? (\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    ) : (\n      <Skeleton width={60} />\n    )\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text color=\"textSubtle\">{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  display: flex;\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\n","import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"text\" fontSize=\"12px\" pr=\"4px\">\n          CHEESE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CHEESE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {pendingTx ? t('Harvesting') : t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n  isTokenOnly,\n}) => {\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid, token.decimals)\n  const { onUnstake } = useUnstakeFarms(pid, token.decimals)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = !isTokenOnly ? getBalanceAmount(stakedBalance) : getBalanceAmount(stakedBalance, token.decimals)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance, token.decimals, isTokenOnly])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n      decimals={token.decimals}\n      isTokenOnly={isTokenOnly}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} decimals={token.decimals} isTokenOnly={isTokenOnly} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n    } catch (e) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(e)\n    } finally {\n      setRequestedApproval(false)\n    }\n  }, [onApprove, dispatch, account, pid, t, toastError])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake')}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBscScanLink } from 'utils'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  multiplier,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = getAddress(farm.lpAddresses)\n  const bsc = getBscScanLink(lpAddress, 'address')\n  const info = `/info/pool/${lpAddress}`\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\n              {t('Get %symbol%', { symbol: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\nconst Layout = styled.div<{background: boolean}>`\n  width: 100%;\n  height: 100%;\n  background: ${({ theme, background }) => background ? theme.colors.primary : \"transparent\"};\n  padding: 20px;\n  border-radius: 10px;\n  text-align-last: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n  background?: boolean\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', background, children }) => {\n  return (\n    <Layout background={background}>\n      <ContentContainer>{children}</ContentContainer>\n      {label && <Label>{label}</Label>}\n    </Layout>\n  )\n}\n\nexport default CellLayout\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  sortable: boolean\n  background?: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n    background: true,\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n    background: true,\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    sortable: true,\n    label: 'Earned',\n    background: true,\n  },\n  {\n    id: 3,\n    name: 'apr',\n    sortable: true,\n    label: 'APR',\n    background: true,\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    sortable: true,\n    label: 'Liquidity',\n    background: true,\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    sortable: true,\n    label: 'Multiplier',\n    background: true,\n  },\n  {\n    id: 6,\n    name: 'details',\n    sortable: true,\n    label: '',\n  },\n]\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/farms/hooks'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isDesktop, isMobile } = useMatchBreakpoints()\n\n  const isSmallerScreen = !isDesktop\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isMobile) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')} background={tableSchema[columnIndex].background} >\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)} background={tableSchema[columnIndex].background} >\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')} background>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')} background>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n  scroll-margin-top: 64px;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container id=\"farms-table\">\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface FarmTabButtonsProps {\n  hasStakeInFinishedFarms: boolean\n}\n\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\n  const { url } = useRouteMatch()\n  const location = useLocation()\n  const { t } = useTranslation()\n\n  let activeIndex\n  switch (location.pathname) {\n    case '/farms':\n      activeIndex = 0\n      break\n    case '/farms/history':\n      activeIndex = 1\n      break\n    case '/farms/archived':\n      activeIndex = 2\n      break\n    default:\n      activeIndex = 0\n      break\n  }\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={activeIndex} scale=\"xs\" variant=\"primary\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedFarms}>\n          <ButtonMenuItem id=\"finished-farms-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\nimport { ViewMode } from 'state/user/actions'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex, Select, OptionProps } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd, usePriceHamsterBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const hamsterPrice = usePriceHamsterBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef(0)\n\n  const { tokenMode } = farmsProps\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  // const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  // const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n\n        if (!farm.isTokenOnly) {\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n          const { cakeRewardsApr, lpRewardsApr } = isActive\n            ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n            : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n          return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n        }\n\n        let totalLiquidity = new BigNumber(0)\n        let price =  new BigNumber(0)\n\n        if (farm.lpSymbol === \"CHEESE\") {\n          totalLiquidity = new BigNumber(farm.tokenBalance).div(BIG_TEN.pow(farm.token.decimals)).times(cakePrice)\n          price = cakePrice\n        } else if (farm.lpSymbol === \"Hamster\") {\n          totalLiquidity = new BigNumber(farm.tokenBalance).div(BIG_TEN.pow(farm.token.decimals)).times(hamsterPrice)\n          price = hamsterPrice\n        }\n\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), price, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, hamsterPrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Page>\n        <PageHeader>\n          <Heading as=\"h1\" scale=\"xxl\" color=\"textSubtle\" mb=\"24px\">\n            {tokenMode\n                ? t('Pools')\n                : t('Farms')\n            }\n          </Heading>\n          <Heading scale=\"lg\" color=\"textSubtle\" mb=\"20px\">\n            {tokenMode\n              ? t('Stake tokens to earn')\n              : t('Stake LP tokens to earn')\n            }\n          </Heading>\n        </PageHeader>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n                text\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={observerRef} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}